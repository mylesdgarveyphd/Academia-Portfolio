library(httr)
oauth_endpoints("twitter")
library("rtweet")
lookup_statuses
lookup_statuses_
oauth_endpoints("twitter")
myapp <- oauth_app("twitter",
key = "TYrWFPkFAkn4G5BbkWINYw",
secret = "qjOkmKYU9kWfUFWmekJuu5tztE9aEfLbt26WlhZL8"
)
myapp
myapp <- oauth_app("twitter",
consumer_key="Ry1J8unRBomSm16PyDhcjvlc0",
consumer_secret = "Tn4OntfHhd53mzNRq2bPiwSCeRYhHQz7CneK9O4uBJsjwktN6k",
access_token = "1214308773323366400-aokPY8aPbVjxf29fO7FktuceDOPHd3",
access_secret= "w7jyjBd5iD1O2paypCCivRGdkI4wD4J134F4Jzb0ZqpGe")
)
myapp <- oauth_app("twitter",
consumer_key="Ry1J8unRBomSm16PyDhcjvlc0",
consumer_secret = "Tn4OntfHhd53mzNRq2bPiwSCeRYhHQz7CneK9O4uBJsjwktN6k",
access_token = "1214308773323366400-aokPY8aPbVjxf29fO7FktuceDOPHd3",
access_secret= "w7jyjBd5iD1O2paypCCivRGdkI4wD4J134F4Jzb0ZqpGe")
?oauth_app
?oauth1.0_token
?GET
library(rtweet)
make_url
structure
?structure
?GET
library(httr)
app <- oauth_app("twitter",
key="Ry1J8unRBomSm16PyDhcjvlc0",
secret = "Tn4OntfHhd53mzNRq2bPiwSCeRYhHQz7CneK9O4uBJsjwktN6k")
credentials <- list(oauth_token = "1214308773323366400-aokPY8aPbVjxf29fO7FktuceDOPHd3",
oauth_token_secret = "w7jyjBd5iD1O2paypCCivRGdkI4wD4J134F4Jzb0ZqpGe")
params <- list(as_header = TRUE)
token <- Token1.0$new(app = app,
endpoint = oauth_endpoints("twitter"),
params = params,
credentials = credentials,
cache = FALSE)
token
?paste0
GET(
"https://api.twitter.com/1.1/search/tweets.json?q=Winter",
token
)
req <- GET(
"https://api.twitter.com/1.1/search/tweets.json?q=Winter",
token
)
content(req)
stop_for_status(req)
library(httr)
app <- oauth_app("twitter",
key="Ry1J8unRBomSm16PyDhcjvlc0",
secret = "Tn4OntfHhd53mzNRq2bPiwSCeRYhHQz7CneK9O4uBJsjwktN6k")
credentials <- list(oauth_token = "1214308773323366400-aokPY8aPbVjxf29fO7FktuceDOPHd3",
oauth_token_secret = "w7jyjBd5iD1O2paypCCivRGdkI4wD4J134F4Jzb0ZqpGe")
params <- list(as_header = TRUE)
token <- Token1.0$new(app = app,
endpoint = oauth_endpoints("twitter"),
params = params,
credentials = credentials,
cache = FALSE)
req <- GET(
"https://api.twitter.com/1.1/search/tweets.json?q=Winter",
token
)
stop_for_status(req)
content(req)
response<-content(req)
response$statuses
statuses<-response$statuses
names(statuses)
length(statuses)
statuses[[1]]
length(statuses[[1]])
?content
names(response)
library(httr)
#Create OAuth Token (Customer Key and Secret)
app <- oauth_app("twitter",
key="Ry1J8unRBomSm16PyDhcjvlc0",
secret = "Tn4OntfHhd53mzNRq2bPiwSCeRYhHQz7CneK9O4uBJsjwktN6k")
#Create OAuth Credentials (Access Key and Secret)
credentials <- list(oauth_token = "1214308773323366400-aokPY8aPbVjxf29fO7FktuceDOPHd3",
oauth_token_secret = "w7jyjBd5iD1O2paypCCivRGdkI4wD4J134F4Jzb0ZqpGe")
#Ensure that we put this in the header of the request
params <- list(as_header = TRUE)
#Create the token with the twitter endpoints
token <- Token1.0$new(app = app,
endpoint = oauth_endpoints("twitter"),
params = params,
credentials = credentials,
cache = FALSE)
#Endpoint URL:
eURL<-"https://api.twitter.com/1.1/search/tweets.json?q=Winter"
#Send the GET Rquest
req <- GET(eURL,token)
#Convert any http request errors into R errors
stop_for_status(req)
#Grab the Response Data.  R will return it as a list rather than in JSON
response<-content(req)
#See the structure of the response:
names(response)
#We only care about the Twitter statuses:
statuses<-response$statuses
#Take A Peek Inside:
length(statuses[[1]])
statuses[[1]]
names(statuses[[1]])
names(statuses[[1]])
names(statuses[[1]])
statuses[[1]][[c("created_at","text","retweeted")]]
statuses[[1]][c("created_at","text","retweeted")]
library(httr)
#Create OAuth Token (Customer Key and Secret)
app <- oauth_app("twitter",
key="Ry1J8unRBomSm16PyDhcjvlc0",
secret = "Tn4OntfHhd53mzNRq2bPiwSCeRYhHQz7CneK9O4uBJsjwktN6k")
#Create OAuth Credentials (Access Key and Secret)
credentials <- list(oauth_token = "1214308773323366400-aokPY8aPbVjxf29fO7FktuceDOPHd3",
oauth_token_secret = "w7jyjBd5iD1O2paypCCivRGdkI4wD4J134F4Jzb0ZqpGe")
#Ensure that we put this in the header of the request
params <- list(as_header = TRUE)
#Create the token with the twitter endpoints
token <- Token1.0$new(app = app,
endpoint = oauth_endpoints("twitter"),
params = params,
credentials = credentials,
cache = FALSE)
#Endpoint URL:
eURL<-"https://api.twitter.com/1.1/search/tweets.json?q=Winter"
#Send the GET Rquest
req <- GET(eURL,token)
#Convert any http request errors into R errors
stop_for_status(req)
#Grab the Response Data.  R will return it as a list rather than in JSON
response<-content(req)
#See the structure of the response:
names(response)
#We only care about the Twitter statuses:
statuses<-response$statuses
#Take A Peek Inside Some of The Properties of the First Tweet:
names(statuses[[1]])
statuses[[1]][c("created_at","text","retweeted")]
eURL<-"https://api.twitter.com/1.1/search/tweets.json?q=Winter&count=10000"
#Send the GET Rquest
req <- GET(eURL,token)
#Convert any http request errors into R errors
stop_for_status(req)
#Grab the Response Data.  R will return it as a list rather than in JSON
response<-content(req)
names(response)
statuses<-response$statuses
length(statuses)
eURL<-"https://api.twitter.com/1.1/search/tweets.json?q=Winter&count=100"
#Send the GET Rquest
req <- GET(eURL,token)
#Convert any http request errors into R errors
stop_for_status(req)
#Grab the Response Data.  R will return it as a list rather than in JSON
response<-content(req)
#See the structure of the response:
names(response)
#We only care about the Twitter statuses:
statuses<-response$statuses
length(statuses)
names(statuses[[1]])
statuses[[1]]$contributors
statuses[[1]]$retweet_count
retweets<-unlist(lapply(statuses,function(x){x$retweet_count}))
retweets
#Endpoint URL:
eURL<-"https://api.twitter.com/1.1/search/tweets.json?q=Winter&count=100"
#Send the GET Rquest
req <- GET(eURL,token)
#Convert any http request errors into R errors
stop_for_status(req)
#Grab the Response Data.  R will return it as a list rather than in JSON
response<-content(req)
#See the structure of the response:
names(response)
#We only care about the Twitter statuses:
statuses<-response$statuses
#Use lapply to iterate through each tweet in the list, and have it pull only
#the retweet_count property from the tweet.  Then, unlist it to conver it to
#a vector of retweets.
retweets<-unlist(lapply(statuses,function(x){x$retweet_count}))
summary(retweets)
#Endpoint URL:
eURL<-"https://api.twitter.com/1.1/search/tweets.json?q=Winter&count=100"
#Send the GET Rquest
req <- GET(eURL,token)
#Convert any http request errors into R errors
stop_for_status(req)
#Grab the Response Data.  R will return it as a list rather than in JSON
response<-content(req)
#See the structure of the response:
names(response)
#We only care about the Twitter statuses:
statuses<-response$statuses
#Use lapply to iterate through each tweet in the list, and have it pull only
#the retweet_count property from the tweet.  Then, unlist it to conver it to
#a vector of retweets.
retweets<-unlist(lapply(statuses,function(x){x$retweet_count}))
summary(retweets)
hist(retweets,main="Retweets")
hist(retweets,main="Retweets",breaks=100)
hist(retweets,main="Retweets",breaks=100,outline=FALSE)
sort(retweets)
hist(retweets[-c(99,100)],main="Retweets",breaks=100,outline=FALSE)
hist(log(retweets),main="Retweets",breaks=100,outline=FALSE)
hist(log(retweets),main="Retweets",breaks=25,outline=FALSE)
hist(log(retweets),main="Retweets",breaks=10,outline=FALSE)
?Token2.0
?Token2.0$new
apiKey<-"rgPevl3YOGivKqD4p2PN3uydtZe0Bj4E35Uve-uv1a-OEHFP5y4_h4yxwnpRhAenVbtQ1qi4h-gQKMNKWByW1nImejG6EpLRFaFckTPkKAqDkNDzyU20IO8CEYEUXnYx"
auth_header <- add_headers('Authorization'=
paste('Bearer',apiKey))
auth_header
url<- "https://api.yelp.com/v3/businesses/search?term=Pizza&location=Wayne,%20NJ"
GET(url,auth_header)
rep<-GET(url,auth_header)
content(rep)
body
body_rep<-content(rep)
names(body_rep)
names(body_rep[[1]])
names(body_rep[["businesses"]])
names(body_rep[["businesses"]][[1]])
b_names<-unlist(lapply(body_rep[["businesses"]],function(x){x$name}))
b_names
#Specify the API Key
apiKey<-"rgPevl3YOGivKqD4p2PN3uydtZe0Bj4E35Uve-uv1a-OEHFP5y4_h4yxwnpRhAenVbtQ1qi4h-gQKMNKWByW1nImejG6EpLRFaFckTPkKAqDkNDzyU20IO8CEYEUXnYx"
#Create and Authentication Header
auth_header <- add_headers('Authorization'= paste('Bearer',apiKey))
#Construct the URL.  Recommended to use Insomnia first to ensure spaces are proper
url<- "https://api.yelp.com/v3/businesses/search?term=Pizza&location=Wayne,%20NJ"
#Send it off!
rep<-GET(url,auth_header)
#Grab Response Data:
body_rep<-content(rep)
#Inspect Structure:
names(body_rep)
#Inspect Business Structure:
names(body_rep[["businesses"]][[1]])
#Get all business names that returned
b_names<-unlist(lapply(body_rep[["businesses"]],function(x){x$name}))
b_names
body<-"{
search(term: \"steakhouse\",
location: \"wayne, nj\",
limit: 5) {
total
business {
name
url
location {
city
state
}
}
}
}"
body
url<- "https://api.yelp.com/v3/graphql"
rep<-POST(url,auth_header,body=body)
body_rep<-content(rep)
rep
headers(rep)
auth_header
content(rep)$headers
?add_headers
auth_header <- add_headers('Authorization'= paste('Bearer',apiKey),
'content-type' = "application/graphql"
)
auth_header <- add_headers('Authorization'= paste('Bearer',apiKey),
'Content-Type' = "application/graphql"
)
auth_header
url<- "https://api.yelp.com/v3/graphql"
body<-"{
search(term: \"steakhouse\",
location: \"wayne, nj\",
limit: 5) {
total
business {
name
url
location {
city
state
}
}
}
}"
rep<-POST(url,auth_header,body=list(data=body))
rep
content(rep)
auth_header <- add_headers('Authorization'= paste('Bearer',apiKey),
'Content-Type' = "application/json"
)
url<- "https://api.yelp.com/v3/graphql"
body<-"{
search(term: \"steakhouse\",
location: \"wayne, nj\",
limit: 5) {
total
business {
name
url
location {
city
state
}
}
}
}"
#Send it off!
rep<-POST(url,auth_header,body=list(data=body))
rep
rep<-POST(url,auth_header,body=body)
rep
auth_header <- add_headers('Authorization'= paste('Bearer',apiKey),
'Content-Type' = "application/json"
)
rep<-POST(url,auth_header,body=body)
rep
auth_header <- add_headers('Authorization'= paste('Bearer',apiKey),
'Content-Type' = "application/graphql"
)
url<- "https://api.yelp.com/v3/graphql"
body<-"{
search(term: \"steakhouse\",
location: \"wayne, nj\",
limit: 5) {
total
business {
name
url
location {
city
state
}
}
}
}"
#Send it off!
rep<-POST(url,auth_header,body=body)
rep
content(rep)
auth_header
headers(rep)
content(rep)$headers
body<-"{
search(term: \"universities\",
location: \"wayne, nj\",
limit: 5) {
total
business {
name
url
location {
city
state
}
}
}
}"
rep<-POST(url,auth_header,body=body)
content(rep)
body_rep<-content(rep)
names(body_rep)
names(body_rep[["data"]])
names(body_rep[["data"]][["search"]])
businesses<-body_rep[["data"]][["search"]][["business"]]
businesses
names(businesses[[1]])
lapply(businesses,function(x){c(x$name,x$url)})
lapply(lapply(businesses,function(x){c(x$name,x$url)}),rbind)
unlist(lapply(lapply(businesses,function(x){c(x$name,x$url)}),rbind))
lapply(lapply(businesses,function(x){c(x$name,x$url)}),rbind)
data.frame(lapply(businesses,function(x){c(x$name,x$url)}))
t(data.frame(lapply(businesses,function(x){c(x$name,x$url)})))
#Get all business names that returned
b_names<-unlist(lapply(businesses,function(x){c(x$name)}))
b_urls<--unlist(lapply(businesses,function(x){c(x$url)}))
businesses<-data.frame(business_name = b_names,yelp_url = b_urls)
#Get all business names that returned
b_names<-unlist(lapply(businesses,function(x){c(x$name)}))
b_urls<-unlist(lapply(businesses,function(x){c(x$url)}))
businesses<-data.frame(business_name = b_names,yelp_url = b_urls)
businesses
#Get all business names that returned
b_names<-unlist(lapply(businesses,function(x){c(x$name)}))
b_urls<-unlist(lapply(businesses,function(x){c(x$location$city)}))
businesses<-data.frame(business_name = b_names,yelp_url = b_urls)
businesses[[1]]
businesses<-body_rep[["data"]][["search"]][["business"]]
#Inspect properties of single business:
names(businesses[[1]])
#Get all business names that returned
b_names<-unlist(lapply(businesses,function(x){c(x$name)}))
b_urls<-unlist(lapply(businesses,function(x){c(x$location$city)}))
businesses<-data.frame(business_name = b_names,yelp_url = b_urls)
businesses
#Create and Authentication Header
auth_header <- add_headers('Authorization'= paste('Bearer',apiKey),
'Content-Type' = "application/graphql"
)
#Construct the URL.  Recommended to use Insomnia first to ensure spaces are proper
url<- "https://api.yelp.com/v3/graphql"
#Construct the GraphQL Query in JSON:
body<-"{
search(term: \"universities\",
location: \"wayne, nj\",
limit: 5) {
total
business {
name
url
location {
city
state
}
}
}
}"
#Send it off!
rep<-POST(url,auth_header,body=body)
#Grab Response Data:
body_rep<-content(rep)
#Inspect Structure:
names(body_rep)
#Inspect data Structure:
names(body_rep[["data"]])
#Inspect search structure:
names(body_rep[["data"]][["search"]])
#Get list of businesses:
businesses<-body_rep[["data"]][["search"]][["business"]]
#Inspect properties of single business:
names(businesses[[1]])
#Get all business names and cities that returned
b_names<-unlist(lapply(businesses,function(x){c(x$name)}))
b_urls<-unlist(lapply(businesses,function(x){c(x$location$city)}))
businesses<-data.frame(business_name = b_names,city = b_urls)
businesses
token<- create_token(
app="BANDMDW",
consumer_key="Ry1J8unRBomSm16PyDhcjvlc0",
consumer_secret = "Tn4OntfHhd53mzNRq2bPiwSCeRYhHQz7CneK9O4uBJsjwktN6k",
access_token = "1214308773323366400-aokPY8aPbVjxf29fO7FktuceDOPHd3",
access_secret= "w7jyjBd5iD1O2paypCCivRGdkI4wD4J134F4Jzb0ZqpGe")
tweets<-search_tweets("Winter")
tweets<-search_tweets("Winter",token=token)
tweets
#Create the Token
token<- create_token(
app="BANDMDW",
consumer_key="Ry1J8unRBomSm16PyDhcjvlc0",
consumer_secret = "Tn4OntfHhd53mzNRq2bPiwSCeRYhHQz7CneK9O4uBJsjwktN6k",
access_token = "1214308773323366400-aokPY8aPbVjxf29fO7FktuceDOPHd3",
access_secret= "w7jyjBd5iD1O2paypCCivRGdkI4wD4J134F4Jzb0ZqpGe")
tweets<-search_tweets("Winter",token=token)
tweets<-data.frame(tweets)
names(tweets)
tweets[,c("screen_name",text","retweet_count")]
tweets[,c("screen_name","text","retweet_count")]
#Create the Token
token<- create_token(
app="BANDMDW",
consumer_key="Ry1J8unRBomSm16PyDhcjvlc0",
consumer_secret = "Tn4OntfHhd53mzNRq2bPiwSCeRYhHQz7CneK9O4uBJsjwktN6k",
access_token = "1214308773323366400-aokPY8aPbVjxf29fO7FktuceDOPHd3",
access_secret= "w7jyjBd5iD1O2paypCCivRGdkI4wD4J134F4Jzb0ZqpGe")
tweets<-search_tweets("Winter",token=token)
tweets<-data.frame(tweets)
names(tweets)
tweets[,c("screen_name","created_at","retweet_count")]
library(rvest)
setwd("C:/Users/mgarvey/Downloads/data_mining/mod_5")
setwd("C:/Users/mgarvey/Downloads/data_mining/mod_4")
setwd("C:/Users/myles/Downloads/data_mining/mod_4")
setwd("C:/Users/myles/Downloads/data_mining/mod_4/reverted/reverted")
read_html("index.html")
the_html<-read_html("index.html")
the_html %>% xml_structure()
the_html %>% html_nodes("div")
html_nodes("div")[1]
html_nodes(the_html,"div")
html_nodes(the_html,"div")[1]
html_children(html_nodes(the_html,"div")[1])
html_children(html_nodes(the_html,"div")[2])
html_nodes(the_html,"p")
html_text(html_nodes(the_html,"p"))
library(rvest)
the_html<-read_html("index.html")
the_html
html_structure(the_html)
html_structure(the_html,indent=5)
p_tags<-html_nodes(the_html,"p")
p_tags
p_text<-html_text(p_tags)
p_text
a_tags<-html_nodes(the_html,"a")
a_tags
html_attr(a_tags)
html_attrs(a_tags)
html_attr(a_tags,"href")
